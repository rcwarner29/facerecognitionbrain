{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar transformData = require('./../helpers/transformData');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar btoa = typeof window !== 'undefined' && window.btoa || require('./../helpers/btoa');\nvar settle = require('../helpers/settle');\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  var requestData = config.data;\n  var requestHeaders = config.headers;\n  if (utils.isFormData(requestData)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  }\n\n  var request = new XMLHttpRequest();\n  var loadEvent = 'onreadystatechange';\n  var xDomain = false;\n\n  // For IE 8/9 CORS support\n  // Only supports POST and GET calls and doesn't returns the response headers.\n  // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n  if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {\n    request = new window.XDomainRequest();\n    loadEvent = 'onload';\n    xDomain = true;\n    request.onprogress = function handleProgress() {};\n    request.ontimeout = function handleTimeout() {};\n  }\n\n  // HTTP basic authentication\n  if (config.auth) {\n    var username = config.auth.username || '';\n    var password = config.auth.password || '';\n    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n  }\n  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n  // Set the request timeout in MS\n  request.timeout = config.timeout;\n\n  // Listen for ready state\n  request[loadEvent] = function handleLoad() {\n    if (!request || request.readyState !== 4 && !xDomain) {\n      return;\n    }\n\n    // The request errored out and we didn't get a response, this will be\n    // handled by onerror instead\n    if (request.status === 0) {\n      return;\n    }\n\n    // Prepare the response\n    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n    var response = {\n      data: transformData(responseData, responseHeaders, config.transformResponse),\n      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n      status: request.status === 1223 ? 204 : request.status,\n      statusText: request.status === 1223 ? 'No Content' : request.statusText,\n      headers: responseHeaders,\n      config: config,\n      request: request\n    };\n    settle(resolve, reject, response);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle low level network errors\n  request.onerror = function handleError() {\n    // Real errors are hidden from us by the browser\n    // onerror should only fire if it's a network error\n    reject(new Error('Network Error'));\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle timeout\n  request.ontimeout = function handleTimeout() {\n    var err = new Error('timeout of ' + config.timeout + 'ms exceeded');\n    err.timeout = config.timeout;\n    err.code = 'ECONNABORTED';\n    reject(err);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies');\n\n    // Add xsrf header\n    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ? cookies.read(config.xsrfCookieName) : undefined;\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName] = xsrfValue;\n    }\n  }\n\n  // Add headers to the request\n  if ('setRequestHeader' in request) {\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        // Remove Content-Type if data is undefined\n        delete requestHeaders[key];\n      } else {\n        // Otherwise add header to the request\n        request.setRequestHeader(key, val);\n      }\n    });\n  }\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  // Handle progress if needed\n  if (config.progress) {\n    if (config.method === 'post' || config.method === 'put') {\n      request.upload.addEventListener('progress', config.progress);\n    } else if (config.method === 'get') {\n      request.addEventListener('progress', config.progress);\n    }\n  }\n  if (requestData === undefined) {\n    requestData = null;\n  }\n\n  // Send the request\n  request.send(requestData);\n};","map":{"version":3,"names":["utils","require","buildURL","parseHeaders","transformData","isURLSameOrigin","btoa","window","settle","module","exports","xhrAdapter","resolve","reject","config","requestData","data","requestHeaders","headers","isFormData","request","XMLHttpRequest","loadEvent","xDomain","process","env","NODE_ENV","XDomainRequest","url","onprogress","handleProgress","ontimeout","handleTimeout","auth","username","password","Authorization","open","method","toUpperCase","params","paramsSerializer","timeout","handleLoad","readyState","status","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","response","transformResponse","statusText","onerror","handleError","Error","err","code","isStandardBrowserEnv","cookies","xsrfValue","withCredentials","read","xsrfCookieName","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","e","progress","upload","addEventListener","send"],"sources":["/Users/raywarner/Documents/ZTM/facerecognitionbrain/node_modules/axios/lib/adapters/xhr.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar transformData = require('./../helpers/transformData');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar btoa = (typeof window !== 'undefined' && window.btoa) || require('./../helpers/btoa');\nvar settle = require('../helpers/settle');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  var requestData = config.data;\n  var requestHeaders = config.headers;\n\n  if (utils.isFormData(requestData)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  }\n\n  var request = new XMLHttpRequest();\n  var loadEvent = 'onreadystatechange';\n  var xDomain = false;\n\n  // For IE 8/9 CORS support\n  // Only supports POST and GET calls and doesn't returns the response headers.\n  // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n  if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {\n    request = new window.XDomainRequest();\n    loadEvent = 'onload';\n    xDomain = true;\n    request.onprogress = function handleProgress() {};\n    request.ontimeout = function handleTimeout() {};\n  }\n\n  // HTTP basic authentication\n  if (config.auth) {\n    var username = config.auth.username || '';\n    var password = config.auth.password || '';\n    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n  }\n\n  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n  // Set the request timeout in MS\n  request.timeout = config.timeout;\n\n  // Listen for ready state\n  request[loadEvent] = function handleLoad() {\n    if (!request || (request.readyState !== 4 && !xDomain)) {\n      return;\n    }\n\n    // The request errored out and we didn't get a response, this will be\n    // handled by onerror instead\n    if (request.status === 0) {\n      return;\n    }\n\n    // Prepare the response\n    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n    var response = {\n      data: transformData(\n        responseData,\n        responseHeaders,\n        config.transformResponse\n      ),\n      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n      status: request.status === 1223 ? 204 : request.status,\n      statusText: request.status === 1223 ? 'No Content' : request.statusText,\n      headers: responseHeaders,\n      config: config,\n      request: request\n    };\n\n    settle(resolve, reject, response);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle low level network errors\n  request.onerror = function handleError() {\n    // Real errors are hidden from us by the browser\n    // onerror should only fire if it's a network error\n    reject(new Error('Network Error'));\n\n    // Clean up request\n    request = null;\n  };\n\n  // Handle timeout\n  request.ontimeout = function handleTimeout() {\n    var err = new Error('timeout of ' + config.timeout + 'ms exceeded');\n    err.timeout = config.timeout;\n    err.code = 'ECONNABORTED';\n    reject(err);\n\n    // Clean up request\n    request = null;\n  };\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies');\n\n    // Add xsrf header\n    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName] = xsrfValue;\n    }\n  }\n\n  // Add headers to the request\n  if ('setRequestHeader' in request) {\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        // Remove Content-Type if data is undefined\n        delete requestHeaders[key];\n      } else {\n        // Otherwise add header to the request\n        request.setRequestHeader(key, val);\n      }\n    });\n  }\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  // Handle progress if needed\n  if (config.progress) {\n    if (config.method === 'post' || config.method === 'put') {\n      request.upload.addEventListener('progress', config.progress);\n    } else if (config.method === 'get') {\n      request.addEventListener('progress', config.progress);\n    }\n  }\n\n  if (requestData === undefined) {\n    requestData = null;\n  }\n\n  // Send the request\n  request.send(requestData);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}